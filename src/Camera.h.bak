#ifndef CAMERA_H
#define CAMERA_H

#include "raylib.h"
#include <stdbool.h>

//------------------------------------------------------------------------------------
// Camera Structure Definition
//------------------------------------------------------------------------------------

typedef struct {
    Camera2D camera;           // Raylib's 2D camera
    Vector2 target;            // Camera target position
    Vector2 offset;            // Camera offset from target
    float zoom;                // Camera zoom level
    float rotation;            // Camera rotation (usually 0 for top-down)
    
    // Camera constraints
    float minZoom;             // Minimum zoom level
    float maxZoom;             // Maximum zoom level
    Vector2 boundaryMin;       // Minimum camera position (world coordinates)
    Vector2 boundaryMax;       // Maximum camera position (world coordinates)
    
    // Mouse interaction state
    bool isDragging;           // Whether mouse is currently dragging
    Vector2 lastMousePos;      // Last mouse position for drag calculation
    Vector2 dragStartPos;      // Position where drag started
    
    // Smooth movement
    bool smoothMovement;       // Whether to use smooth camera movement
    float smoothSpeed;         // Speed of smooth camera movement (0.0-1.0)
    Vector2 targetPosition;    // Target position for smooth movement
    float targetZoom;          // Target zoom for smooth zoom
    
    // Camera settings
    float zoomSpeed;           // Speed of zoom changes
    float dragSensitivity;     // Sensitivity for mouse dragging
    bool invertDrag;           // Whether to invert drag direction
    
} GameCamera;

//------------------------------------------------------------------------------------
// Camera Functions Declaration
//------------------------------------------------------------------------------------

#ifdef __cplusplus
extern "C" {
#endif

// Core camera functions
void InitializeCamera(GameCamera* camera, int screenWidth, int screenHeight);
void UpdateGameCamera(GameCamera* camera);
void BeginCameraMode(GameCamera* camera);
void EndCameraMode(void);

// Camera control functions
void Camera_HandleMouseInput(GameCamera* camera);
void Camera_SetTarget(GameCamera* camera, Vector2 target);
void Camera_SetZoom(GameCamera* camera, float zoom);
void Camera_ZoomIn(GameCamera* camera, float amount);
void Camera_ZoomOut(GameCamera* camera, float amount);
void Camera_Move(GameCamera* camera, Vector2 delta);

// Camera utility functions
Vector2 Camera_ScreenToWorld(GameCamera* camera, Vector2 screenPos);
Vector2 Camera_WorldToScreen(GameCamera* camera, Vector2 worldPos);
bool Camera_IsPointInView(GameCamera* camera, Vector2 worldPos);
Rectangle Camera_GetViewBounds(GameCamera* camera);

// Camera constraints
void Camera_SetBoundaries(GameCamera* camera, Vector2 min, Vector2 max);
void Camera_SetZoomLimits(GameCamera* camera, float minZoom, float maxZoom);
void Camera_ConstrainToBoard(GameCamera* camera, float boardRadius, float hexSize);

// Camera smoothing
void Camera_EnableSmoothMovement(GameCamera* camera, float speed);
void Camera_DisableSmoothMovement(GameCamera* camera);
void Camera_SmoothMoveToTarget(GameCamera* camera, Vector2 target);
void Camera_SmoothZoomToTarget(GameCamera* camera, float zoom);

// Camera reset and configuration
void Camera_Reset(GameCamera* camera);
void Camera_CenterOnPoint(GameCamera* camera, Vector2 point);
void Camera_FitToBoard(GameCamera* camera, float boardRadius, float hexSize, int screenWidth, int screenHeight);

#ifdef __cplusplus
}
#endif

#endif // CAMERA_H